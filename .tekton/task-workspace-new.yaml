apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: workspace-new-task
spec:
  params:
    - name: ibmcloud-api
      description: the ibmcloud api
      default: https://cloud.ibm.com
    - name: continuous-delivery-context-secret
      description: name of the configmap containing the continuous delivery pipeline context secrets
      default: secure-properties
    - name: apikey-secret-key
      description: field in the secret that contains the api key used to login to ibmcloud
      default: apikey
    - name: region
      description: |
        (optional) the ibmcloud region to target
      default: ""
    - name: resource-group
      description: target resource group (name or id) for the ibmcloud login operation
      default: ""
    - name: shuttle-properties-file
      default: ""
    - name: pipeline-debug
      default: "0"
    - name: workspace-name
    - name: workspace-repository
    - name: workspace-repository-branch
    - name: workspace-repository-folder
    - name: git-credentials-json-file
      default: ""
  results:
    - name: workspace-id
  workspaces:
    - name: artifacts
      mountPath: /artifacts
  steps:
    - name: execute
      image: ibmcom/pipeline-base-image:3.0
      workingDir: /artifacts
      env:
        - name: BUILD_NUMBER
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/build-number']
        - name: PIPELINE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/pipeline-id']
        - name: PIPELINE_STAGE_EXECUTION_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']
        - name: PIPELINE_TRIGGERING_USER
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/triggered-by']
        - name: PIPELINE_BLUEMIX_API_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: $(params.apikey-secret-key)
        - name: PIPELINE_BLUEMIX_RESOURCE_GROUP
          value: $(params.resource-group)
        - name: SHUTTLE_PROPERTIES_FILE
          value: $(params.shuttle-properties-file)
        - name: PIPELINE_DEBUG
          value: $(params.pipeline-debug)
        - name: SCHEMATICS_WORKSPACE_NAME
          value: $(params.workspace-name)
        - name: SCHEMATICS_WORKSPACE_REPOSITORY
          value: $(params.workspace-repository)
        - name: SCHEMATICS_WORKSPACE_REPOSITORY_BRANCH
          value: $(params.workspace-repository-branch)
        - name: SCHEMATICS_WORKSPACE_REPOSITORY_FOLDER
          value: $(params.workspace-repository-folder)
        - name: JSON_FILE_GIT_CREDENTIALS
          value: $(params.git-credentials-json-file)
      script: |
        #!/bin/bash
        set -e -o pipefail
        if [ $PIPELINE_DEBUG == 1 ]; then
            env
            pwd
            ls -l
            echo "=== cat /artifacts/_toolchain.json ==="
            cat /artifacts/_toolchain.json
            echo ""
            echo "======================================"
            trap env EXIT
            set -x
        fi

        ibmcloud config --check-version false
        if [ "$(params.region)" ]; then
          # if region is in the 'ibm:yp:<region>' just keep the region part
          export IBM_CLOUD_REGION=$(echo "$(params.region)" | awk -F ':' '{print $NF;}')
        else
          export IBM_CLOUD_REGION=$(jq -r '.region_id' /artifacts/_toolchain.json | awk -F: '{print $3}')
        fi
        ibmcloud login -a $(params.ibmcloud-api) -r $IBM_CLOUD_REGION --apikey $PIPELINE_BLUEMIX_API_KEY
        if [ "$PIPELINE_BLUEMIX_RESOURCE_GROUP" ]; then
          ibmcloud target -g "$PIPELINE_BLUEMIX_RESOURCE_GROUP"
        fi

        export PIPELINE_TOOLCHAIN_ID=$(jq -r '.toolchain_guid' /artifacts/_toolchain.json)
        if [ "$SHUTTLE_PROPERTIES_FILE" ]; then
          source $SHUTTLE_PROPERTIES_FILE
          export $(cut -d= -f1 $SHUTTLE_PROPERTIES_FILE)
        fi

        if [ "$JSON_FILE_GIT_CREDENTIALS" ]; then
          echo "GITHUB_TOKEN ="
          cat "${ARTIFACTS_PATH}/${JSON_FILE_GIT_CREDENTIALS}" | jq -r .GITHUB_TOKEN
        fi

        SCHEMATICS_WORKSPACE_LIST_JSON=$(ibmcloud schematics workspace list --output json)
        SCHEMATICS_WORKSPACE_ID=$(echo $SCHEMATICS_WORKSPACE_LIST_JSON | jq -r '.workspaces | .[] | select(.resource_group=="'$PIPELINE_BLUEMIX_RESOURCE_GROUP'" and .name=="'$SCHEMATICS_WORKSPACE_NAME'") | .id')
        if [[ -z "$SCHEMATICS_WORKSPACE_ID" ]]; then
          echo "Workspace $SCHEMATICS_WORKSPACE_NAME not found"

          echo '{
            "name": "'$SCHEMATICS_WORKSPACE_NAME'",
            "type": [
              "terraform_v0.13"
            ],
            "location": "'$IBM_CLOUD_REGION'",
            "description": "",
            "tags": [],
            "resource_group": "'$PIPELINE_BLUEMIX_RESOURCE_GROUP'",
            "template_repo": {
              "url": "'$SCHEMATICS_WORKSPACE_REPOSITORY/tree/$SCHEMATICS_WORKSPACE_REPOSITORY_BRANCH/$SCHEMATICS_WORKSPACE_REPOSITORY_FOLDER'"
            },
            "template_data": [
              {
                "folder": "'$SCHEMATICS_WORKSPACE_REPOSITORY_FOLDER'",
                "type": "terraform_v0.13"
              }
            ]
          }' > /tmp/new-workspace.json
          cat /tmp/new-workspace.json
          WORKSPACE_JSON=$(ibmcloud schematics workspace new --file /tmp/new-workspace.json --output json)
          SCHEMATICS_WORKSPACE_ID=$(echo $WORKSPACE_JSON | jq -r .id)
        else
          echo "Workspace already exists"
        fi
        echo "SCHEMATICS_WORKSPACE_ID=$SCHEMATICS_WORKSPACE_ID"

        echo -n "$SCHEMATICS_WORKSPACE_ID" > $(results.workspace-id.path)
      volumeMounts:
        - mountPath: /cd-config
          name: cd-config-volume
        - mountPath: /steps
          name: steps-volume
        - mountPath: /artifacts/_toolchain.json
          subPath: toolchain.json
          name: cd-config-volume
  volumes:
    - name: steps-volume
      emptyDir: {}
    - name: cd-config-volume
      configMap:
        name: toolchain
        items:
          - key: toolchain.json
            path: toolchain.json
